const typeMapping = {
  motherboard: 1,
  cpu: 2,
  ram: 3,
  gpu: 4,
  storage: 5,
  psu: 6,
  case: 7
};

let selectedComponents = [];


const typeIdToName = Object.fromEntries(
  Object.entries(typeMapping).map(([key, value]) => [value, key])
);


// –¢–µ–ø–µ—Ä—å –ª–æ–∫–∞–ª—å–Ω—ã–π API
const API_URL = 'https://localhost:7140';


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {

  setupComponentSlots();

  const configIdFromUrl = new URLSearchParams(window.location.search).get('configId');
  
  if (configIdFromUrl && configIdFromUrl !== 'undefined') {
    await loadConfiguration(); // –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  } else {
    await createConfiguration(); // –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é
  }


});

let currentComponentType = '';
let allComponents = [];
let currentConfigurationId = null;
const urlParams = new URLSearchParams(window.location.search);
const configId = new URLSearchParams(window.location.search).get('configId');
const configName = localStorage.getItem('currentConfigName') || 'Konfiguracja komputera';
const userId = localStorage.getItem('userId') || null;
document.getElementById('configTitle').innerText = `Konfiguracja: ${configName}`;

//const configurationName = urlParams.get('title');
//console.log('–ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', configurationName);
// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function createConfiguration() {
  const configIdFromUrl = new URLSearchParams(window.location.search).get('configId');
  if (configIdFromUrl && configIdFromUrl !== 'undefined') {
    currentConfigurationId = configIdFromUrl;
    return;
  }

  const payload = userId
    ? { configurationName: configName, userId: userId }
    : configName;

  try {
    const response = await fetch(`${API_URL}/configurator/Configurations`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const text = await response.text();
      console.error('B≈ÇƒÖd tworzenia konfiguracji::', response.status, text);
      throw new Error('B≈ÇƒÖd serwera: ' + response.status + ' ' + text);
    }

    const data = await response.json();
    console.log('Za≈Çadowane komponenty:', data);
    currentConfigurationId = data.id;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ localStorage
    if (!userId) {
      const guestConfigs = JSON.parse(localStorage.getItem('guestConfigs') || '[]');
      guestConfigs.push({ id: currentConfigurationId, name: configName });
      localStorage.setItem('guestConfigs', JSON.stringify(guestConfigs));
    }
  } catch (error) {
    console.error('B≈ÇƒÖd ≈Çadowania komponent√≥w konfiguracji: ', error);
  }
  await loadConfigurationComponents();

}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function loadConfigurationComponents() {
  if (!currentConfigurationId) return;

  try {
    const response = await fetch(`${API_URL}/configurator/Configurations/Components/${currentConfigurationId}`);
    const components = await response.json();
    console.log('Konfiguracja za≈Çadowana z serwera:', components);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    selectedComponents = components;
    components.forEach(component => {
      const slot = document.getElementById(`slot-${typeIdToName[component.typeId]}`);
      if (slot) {
        slot.innerHTML = `
          <div class="tile-icon">
            <img src="${component.imageUrl}" alt="${component.name}">
          </div>
          <div class="tile-label small-label">${component.name}</div>
          <button class="remove-btn" onclick="removeComponent('${component.typeId}', '${typeIdToName[component.typeId]}')">üóë</button>
        `;
      }
    });
  } catch (error) {
    console.error('Nie uda≈Ço siƒô za≈Çadowaƒá konfiguracji z serwera', error);
  }
}


async function loadConfiguration() {
  const userId = localStorage.getItem('userId');
  const configIdFromUrl = new URLSearchParams(window.location.search).get('configId');

  if (!configIdFromUrl) return;

  let config;
  
  // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
  if (userId) {
    const response = await fetch(`${API_URL}/configurator/Configurations/${configIdFromUrl}`);
    if (response.ok) {
      config = await response.json();
      console.log('Konfiguracja za≈Çadowana z serwera:', config);
    } else {
      console.error('Nie uda≈Ço siƒô za≈Çadowaƒá konfiguracji z serwera');
    }
  } else {
    // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
    const guestConfigs = JSON.parse(localStorage.getItem('guestConfigs') || '[]');
    config = guestConfigs.find(cfg => cfg.id === configIdFromUrl);
    if (config) {
      console.log('Konfiguracja za≈Çadowana z localStorage:', config);
    } else {
      console.error('Konfiguracja nie zosta≈Ça znaleziona w localStorage');
    }
  }

  if (config) {
    // –û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    document.getElementById('configTitle').innerText = `Konfiguracja: ${config.name}`;
    currentConfigurationId = config.id;
    await loadConfigurationComponents();  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  }
}


// –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
async function toggleComponentModal(componentType = '') {
  const modal = document.getElementById('componentModal');
  modal.style.display = (modal.style.display === 'flex') ? 'none' : 'flex';

  if (componentType && currentConfigurationId) {
    currentComponentType = componentType;
    await loadComponentsForType(componentType);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
async function loadComponentsForType(type) {
  if (!currentConfigurationId) {
    console.error('–ù–µ –∑–∞–¥–∞–Ω ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!');
    return;
  }  
  try {
    const typeId = typeMapping[type];

    if (!typeId) {
      console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:", type);
      return;
    }

    let url = `${API_URL}/configurator/Components`; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ

    if (currentConfigurationId) {
      url = `${API_URL}/configurator/Configurations/${currentConfigurationId}/SuitableComponentsByType/${typeId}`;
    }

    console.log(`–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å URL: ${url}`);
    const response = await fetch(url);
    const data = await response.json();
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:', data);

    allComponents = data;
    displayComponents(allComponents);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
  }
}


// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –º–æ–¥–∞–ª–∫–µ
function displayComponents(components) {
  const grid = document.getElementById('modalComponentGrid');
  grid.innerHTML = '';

  components.forEach(component => {
    const card = document.createElement('div');
    card.className = 'component-card';
    card.onclick = () => selectComponent(component);

    card.innerHTML = `
      <img src="${component.imageUrl}" alt="${component.name}">
      <strong>${component.name}</strong>
      <p>${component.price} $</p>
    `;

    grid.appendChild(card);
  });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
function filterComponents() {
  const search = document.getElementById('searchInput').value.toLowerCase();
  const min = parseFloat(document.getElementById('minPrice').value) || 0;
  const max = parseFloat(document.getElementById('maxPrice').value) || Infinity;

  const filtered = allComponents.filter(c =>
    c.name.toLowerCase().includes(search) &&
    c.price >= min &&
    c.price <= max
  );

  displayComponents(filtered);
}

// –í—ã–±–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
async function selectComponent(component) {
  if (!currentConfigurationId) {
    console.error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞!');
    return;
  }

  const typeId = component.typeId;

  try {
    // 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —ç—Ç–æ–≥–æ —Ç–∏–ø–∞, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤—ã–±—Ä–∞–Ω
    const existing = selectedComponents.find(c => c.typeId === typeId);
    if (existing) {
      console.log(`–£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∏–ø–∞ ${typeId}...`);
      const deleteResp = await fetch(`${API_URL}/configurator/Configurations/${currentConfigurationId}/Component/${typeId}`, {
        method: 'DELETE'
      });

      if (!deleteResp.ok) {
        const delText = await deleteResp.text();
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:', delText);
      } else {
        console.log('–°—Ç–∞—Ä—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–¥–∞–ª—ë–Ω');
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
      selectedComponents = selectedComponents.filter(c => c.typeId !== typeId);
    }

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    const response = await fetch(`${API_URL}/configurator/Configurations/${currentConfigurationId}/add-component/${component.id}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      const text = await response.text();
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', text);
      throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + response.status);
    }

    const data = await response.text();
    console.log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω:', data);

    selectedComponents.push(component); // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫

    // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–ª–∏—Ç–∫–∏
    const slot = document.getElementById(`slot-${currentComponentType}`);
    if (slot) {
      slot.innerHTML = `
        <div class="tile-icon">
          <img src="${component.imageUrl}" alt="${component.name}">
        </div>
        <div class="tile-label small-label">${component.name}</div>
        <button class="remove-btn" onclick="removeComponent('${component.typeId}', '${currentComponentType}')">üóë</button>
      `;
    }
    

    toggleComponentModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
  }
}


// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
function setupComponentSlots() {
  const components = [
    { type: 'motherboard', label: 'P≈Çyta g≈Ç√≥wna' },
    { type: 'cpu', label: 'Procesor' },
    { type: 'ram', label: 'Pamiƒôƒá RAM' },
    { type: 'gpu', label: 'Karta graficzna' },
    { type: 'storage', label: 'Dysk' },
    { type: 'psu', label: 'Zasilacz' },
    { type: 'case', label: 'Obudowa' }
  ];

  const list = document.getElementById('componentList');
  list.innerHTML = '';
  components.forEach(comp => {
    const tile = document.createElement('div');
    tile.className = 'tile config-tile';
    tile.id = `slot-${comp.type}`;
    tile.onclick = () => toggleComponentModal(comp.type);

    tile.innerHTML = `
      <div class="tile-icon">
        <img src="icons/${comp.type}.png" alt="${comp.label}">
      </div>
      <div class="tile-label"> ${comp.label}</div>
    `;

    list.appendChild(tile);
  });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ–π —Å–±–æ—Ä–∫–∏
async function saveFullBuild() {
  const urlParams = new URLSearchParams(window.location.search);
  const configurationName = sessionStorage.getItem('currentConfigName') || 'Konfiguracja komputera';
  console.log('–ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', configurationName);

  if (!configurationName) {
    alert('–ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ!');
    return;
  }

  const payload = {
    configurationName: configurationName,
    userId: userId,
    components: selectedComponents.map(component => component.id)
  };
  

  try {
    const response = await fetch("https://localhost:7140/configurator/Configurations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const text = await response.text();
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏:', text);
      throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + response.status);
    }

    alert('–°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–±–æ—Ä–∫–∏:', error);
  }
}

async function removeComponent(typeId, typeName) {
  if (!currentConfigurationId) return;

  try {
    const response = await fetch(`${API_URL}/configurator/Configurations/${currentConfigurationId}/Component/${typeId}`, {
      method: 'DELETE'
    });

    if (!response.ok) {
      const text = await response.text();
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', text);
      return;
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞
    selectedComponents = selectedComponents.filter(c => c.typeId != typeId);

    // –û—á–∏—â–∞–µ–º —Å–ª–æ—Ç
    const slot = document.getElementById(`slot-${typeName}`);
    if (slot) {
      slot.innerHTML = `
        <div class="tile-icon">
          <img src="icons/${typeName}.png" alt="${typeName}">
        </div>
        <div class="tile-label"> ${typeName}</div>
      `;
    }

    console.log(`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∏–ø–∞ ${typeName} —É–¥–∞–ª—ë–Ω.`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', err);
  }
}
















function goToMain() {
  window.location.href = 'main.html';
}
