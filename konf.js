
  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(45, window.innerWidth / 500, 0.1, 1000);
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, 500);
document.getElementById('scene-container').appendChild(renderer.domElement);

// –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã
camera.position.set(0, 5, 15);
camera.lookAt(0, 0, 0);

// –û—Å–≤–µ—â–µ–Ω–∏–µ
const light = new THREE.DirectionalLight(0xffffff, 1);
light.position.set(10, 10, 10).normalize();
scene.add(light);
// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
const loader = new THREE.OBJLoader();
loader.load('gk/model.obj', function (object) {
    console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–æ:", object);
    object.scale.set(1, 1, 1); // –ò–∑–º–µ–Ω–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    object.position.set(0, -2, 0);
    scene.add(object);

    // üéØ –î–æ–±–∞–≤–∏–º —Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä)
    const dotGeometry = new THREE.SphereGeometry(0.2, 16, 16);
    const dotMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });
    const dot = new THREE.Mesh(dotGeometry, dotMaterial);
    dot.position.set(0, 1, 0); // –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –º–æ–¥–µ–ª–∏
    dot.name = "CPU";
    scene.add(dot);

    // –°–æ—Ö—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ—á–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å —Ü–≤–µ—Ç –∏ —Ç.–ø.
    scene.userData.dots = { "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä": dot };
});

function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
}
animate();
